// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

// Ref: #/components/responses/BadRequest
type BadRequest struct{}

func (*BadRequest) receiptsProcessPostRes() {}

// Ref: #/components/schemas/Item
type Item struct {
	// The Short Product Description for the item.
	ShortDescription string `json:"shortDescription"`
	// The total price payed for this item.
	Price string `json:"price"`
}

// GetShortDescription returns the value of ShortDescription.
func (s *Item) GetShortDescription() string {
	return s.ShortDescription
}

// GetPrice returns the value of Price.
func (s *Item) GetPrice() string {
	return s.Price
}

// SetShortDescription sets the value of ShortDescription.
func (s *Item) SetShortDescription(val string) {
	s.ShortDescription = val
}

// SetPrice sets the value of Price.
func (s *Item) SetPrice(val string) {
	s.Price = val
}

// Ref: #/components/responses/NotFound
type NotFound struct{}

func (*NotFound) receiptsIDPointsGetRes() {}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Receipt
type Receipt struct {
	// The name of the retailer or store the receipt is from.
	Retailer string `json:"retailer"`
	// The date of the purchase printed on the receipt.
	PurchaseDate time.Time `json:"purchaseDate"`
	// The time of the purchase printed on the receipt. 24-hour time expected.
	PurchaseTime time.Time `json:"purchaseTime"`
	Items        []Item    `json:"items"`
	// The total amount paid on the receipt.
	Total string `json:"total"`
}

// GetRetailer returns the value of Retailer.
func (s *Receipt) GetRetailer() string {
	return s.Retailer
}

// GetPurchaseDate returns the value of PurchaseDate.
func (s *Receipt) GetPurchaseDate() time.Time {
	return s.PurchaseDate
}

// GetPurchaseTime returns the value of PurchaseTime.
func (s *Receipt) GetPurchaseTime() time.Time {
	return s.PurchaseTime
}

// GetItems returns the value of Items.
func (s *Receipt) GetItems() []Item {
	return s.Items
}

// GetTotal returns the value of Total.
func (s *Receipt) GetTotal() string {
	return s.Total
}

// SetRetailer sets the value of Retailer.
func (s *Receipt) SetRetailer(val string) {
	s.Retailer = val
}

// SetPurchaseDate sets the value of PurchaseDate.
func (s *Receipt) SetPurchaseDate(val time.Time) {
	s.PurchaseDate = val
}

// SetPurchaseTime sets the value of PurchaseTime.
func (s *Receipt) SetPurchaseTime(val time.Time) {
	s.PurchaseTime = val
}

// SetItems sets the value of Items.
func (s *Receipt) SetItems(val []Item) {
	s.Items = val
}

// SetTotal sets the value of Total.
func (s *Receipt) SetTotal(val string) {
	s.Total = val
}

type ReceiptsIDPointsGetOK struct {
	Points OptInt64 `json:"points"`
}

// GetPoints returns the value of Points.
func (s *ReceiptsIDPointsGetOK) GetPoints() OptInt64 {
	return s.Points
}

// SetPoints sets the value of Points.
func (s *ReceiptsIDPointsGetOK) SetPoints(val OptInt64) {
	s.Points = val
}

func (*ReceiptsIDPointsGetOK) receiptsIDPointsGetRes() {}

type ReceiptsProcessPostOK struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *ReceiptsProcessPostOK) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *ReceiptsProcessPostOK) SetID(val string) {
	s.ID = val
}

func (*ReceiptsProcessPostOK) receiptsProcessPostRes() {}
